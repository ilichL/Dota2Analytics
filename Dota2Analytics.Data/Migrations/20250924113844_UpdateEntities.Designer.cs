// <auto-generated />
using System;
using System.Collections.Generic;
using Dota2Analytics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dota2Analytics.Data.Migrations
{
    [DbContext(typeof(DotaContext))]
    [Migration("20250924113844_UpdateEntities")]
    partial class UpdateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Hero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Agility")
                        .HasColumnType("integer");

                    b.Property<int?>("AgilityIncrease")
                        .HasColumnType("integer");

                    b.Property<int?>("Armor")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("Aspect")
                        .HasColumnType("integer[]");

                    b.Property<int?>("AttackInterval")
                        .HasColumnType("integer");

                    b.Property<int?>("AttackRange")
                        .HasColumnType("integer");

                    b.Property<int?>("AttackSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("AttackType")
                        .HasColumnType("integer");

                    b.Property<int>("Attribute")
                        .HasColumnType("integer");

                    b.Property<int>("DayVision")
                        .HasColumnType("integer");

                    b.Property<int?>("Health")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HealthRegen")
                        .HasColumnType("numeric");

                    b.PrimitiveCollection<int?[]>("HeroTags")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("InnateAbility")
                        .HasColumnType("text");

                    b.Property<int?>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int?>("IntelligenceIncrease")
                        .HasColumnType("integer");

                    b.Property<int?>("Mana")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ManaRegen")
                        .HasColumnType("numeric");

                    b.Property<int?>("MaxDamage")
                        .HasColumnType("integer");

                    b.Property<int?>("MinDamage")
                        .HasColumnType("integer");

                    b.Property<int?>("MooveSpeed")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NightVision")
                        .HasColumnType("integer");

                    b.Property<int?>("OpenDotaId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int?[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int?>("Strength")
                        .HasColumnType("integer");

                    b.Property<int?>("StrengthIncrease")
                        .HasColumnType("integer");

                    b.Property<string>("TalentTree")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.HeroStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AverageGpm")
                        .HasColumnType("integer");

                    b.Property<int>("AverageXpm")
                        .HasColumnType("integer");

                    b.Property<int>("BestWinStreak")
                        .HasColumnType("integer");

                    b.Property<Guid>("HeroId")
                        .HasColumnType("uuid");

                    b.Property<int>("WinRate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("HeroStats");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Iteam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Ability")
                        .HasColumnType("integer");

                    b.Property<string>("ActiveDescription")
                        .HasColumnType("text");

                    b.Property<int?>("Cooldown")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPossibleToEat")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IteamPurchaseId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ManaCost")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPurchases")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeCost")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.ItemPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("EatTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IteamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MatchEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchPlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PurchaseTime")
                        .HasColumnType("integer");

                    b.Property<int?>("SoldTime")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<bool?>("WasEaten")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IteamId")
                        .IsUnique();

                    b.HasIndex("MatchEventId");

                    b.HasIndex("MatchPlayerId");

                    b.ToTable("ItemPurchases");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DireScore")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RadiantScore")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SteamMatchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WinnerTeam")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.MatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RuneType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.MatchPlayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Assists")
                        .HasColumnType("integer");

                    b.Property<int?>("BountyRunes")
                        .HasColumnType("integer");

                    b.Property<int?>("CampsStacked")
                        .HasColumnType("integer");

                    b.Property<int?>("CreepsDenies")
                        .HasColumnType("integer");

                    b.Property<int?>("CreepsLastHit")
                        .HasColumnType("integer");

                    b.Property<int?>("DamageReceivedRaw")
                        .HasColumnType("integer");

                    b.Property<int?>("DamageReceivedReduced")
                        .HasColumnType("integer");

                    b.Property<int?>("Death")
                        .HasColumnType("integer");

                    b.Property<int?>("DotaBuffId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Gpm")
                        .HasColumnType("numeric");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HeroDamagePerMinute")
                        .HasColumnType("numeric");

                    b.Property<int?>("HeroHealing")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HeroHealingPerMinute")
                        .HasColumnType("numeric");

                    b.Property<Guid>("HeroId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Kda")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("KillPerMinute")
                        .HasColumnType("numeric");

                    b.Property<int?>("Kills")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("NetWorth")
                        .HasColumnType("integer");

                    b.Property<int?>("OutpostCaptured")
                        .HasColumnType("integer");

                    b.Property<int>("Pick")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PlayerLevel")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("SupportContribution")
                        .HasColumnType("text[]");

                    b.Property<int?>("SupportGoldSpent")
                        .HasColumnType("integer");

                    b.Property<int>("Team")
                        .HasColumnType("integer");

                    b.Property<int?>("TowerDamage")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TowerDamagePerMinute")
                        .HasColumnType("numeric");

                    b.Property<int>("Win")
                        .HasColumnType("integer");

                    b.Property<decimal>("Xpm")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("MatchPlayers");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrivateHistory")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MatchEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<long?>("SteamAccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("WinRate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchEventId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.RequestLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientIP")
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueryString")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ResponseTimeMs")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Affects")
                        .HasColumnType("text");

                    b.Property<int?>("Cooldown")
                        .HasColumnType("integer");

                    b.Property<string>("DamageType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Dispellable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HeroId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ManaCost")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("PiercesDebuffImmunity")
                        .HasColumnType("boolean");

                    b.Property<int?>("Range")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("IteamIteam", b =>
                {
                    b.Property<Guid>("ParentIteamsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsedInItemsId")
                        .HasColumnType("uuid");

                    b.HasKey("ParentIteamsId", "UsedInItemsId");

                    b.HasIndex("UsedInItemsId");

                    b.ToTable("IteamIteam");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.HeroStats", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.Hero", "Hero")
                        .WithOne("HeroStats")
                        .HasForeignKey("Dota2Analytics.Data.Entities.HeroStats", "HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.ItemPurchase", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.Iteam", "Iteam")
                        .WithOne("ItemPurchase")
                        .HasForeignKey("Dota2Analytics.Data.Entities.ItemPurchase", "IteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dota2Analytics.Data.Entities.MatchEvent", null)
                        .WithMany("ItemPurchases")
                        .HasForeignKey("MatchEventId");

                    b.HasOne("Dota2Analytics.Data.Entities.MatchPlayer", "MatchPlayer")
                        .WithMany("ItemPurchase")
                        .HasForeignKey("MatchPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Iteam");

                    b.Navigation("MatchPlayer");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.MatchEvent", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.Match", "Match")
                        .WithMany("MatchEvents")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.MatchPlayer", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.Hero", "Hero")
                        .WithOne("MatchPlayer")
                        .HasForeignKey("Dota2Analytics.Data.Entities.MatchPlayer", "HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dota2Analytics.Data.Entities.Match", "Match")
                        .WithMany("MatchPlayers")
                        .HasForeignKey("MatchId");

                    b.HasOne("Dota2Analytics.Data.Entities.Player", "Player")
                        .WithOne("MatchPlayer")
                        .HasForeignKey("Dota2Analytics.Data.Entities.MatchPlayer", "PlayerId");

                    b.Navigation("Hero");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Player", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.MatchEvent", "MatchEvent")
                        .WithMany("Players")
                        .HasForeignKey("MatchEventId");

                    b.Navigation("MatchEvent");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Skill", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.Hero", "Hero")
                        .WithMany("Skills")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("IteamIteam", b =>
                {
                    b.HasOne("Dota2Analytics.Data.Entities.Iteam", null)
                        .WithMany()
                        .HasForeignKey("ParentIteamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dota2Analytics.Data.Entities.Iteam", null)
                        .WithMany()
                        .HasForeignKey("UsedInItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Hero", b =>
                {
                    b.Navigation("HeroStats");

                    b.Navigation("MatchPlayer");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Iteam", b =>
                {
                    b.Navigation("ItemPurchase");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Match", b =>
                {
                    b.Navigation("MatchEvents");

                    b.Navigation("MatchPlayers");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.MatchEvent", b =>
                {
                    b.Navigation("ItemPurchases");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.MatchPlayer", b =>
                {
                    b.Navigation("ItemPurchase");
                });

            modelBuilder.Entity("Dota2Analytics.Data.Entities.Player", b =>
                {
                    b.Navigation("MatchPlayer");
                });
#pragma warning restore 612, 618
        }
    }
}
